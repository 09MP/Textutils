{"ast":null,"code":"var _jsxFileName = \"F:\\\\B Web development\\\\react\\\\my-app\\\\src\\\\Componants\\\\Textform.js\",\n  _s = $RefreshSig$();\n// create state\n// hooks it is finction based componant\nimport React, { useState } from \"react\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nexport default function Textform(props) {\n  _s();\n  // using this function if we can clicked the convert uppercase button the value in the textbox convert to thr uppercase\n\n  const handleupClick = () => {\n    let newText = text.toLocaleUpperCase();\n    // we want to change the state then we use this function\n    setText(newText);\n  };\n  // uisng this function we can add text\n  const handleOnChange = event => {\n    setText(event.target.value);\n  };\n  const [text, setText] = useState(\"Enter Text Here\");\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"Container\",\n      children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n        children: props.heading\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 22,\n        columnNumber: 7\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"mb-3\",\n        children: /*#__PURE__*/_jsxDEV(\"textarea\", {\n          className: \"form-control\"\n          // in this value we can set the text value using state\n          ,\n          value: text,\n          onChange: handleOnChange,\n          id: \"exampleFormControlTextarea1\",\n          rows: \"18\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 27,\n          columnNumber: 9\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 23,\n        columnNumber: 7\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        type: \"button\",\n        className: \"btn btn-primary\",\n        onClick: handleupClick,\n        children: \"convert to uppercase\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 32,\n        columnNumber: 7\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 20,\n      columnNumber: 5\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"className my-3\",\n      children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n        children: \"Your Text Summary\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 38,\n        columnNumber: 7\n      }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n        children: [text.split(\" \").length, \" word and \", text.length, \" character\"]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 39,\n        columnNumber: 7\n      }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n        children: 0.008 * text.split(\" \").length\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 40,\n        columnNumber: 7\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 37,\n      columnNumber: 5\n    }, this)]\n  }, void 0, true);\n}\n_s(Textform, \"zbSZTvWqRTbUJlkTkmVoGrClxdM=\");\n_c = Textform;\nvar _c;\n$RefreshReg$(_c, \"Textform\");","map":{"version":3,"names":["React","useState","jsxDEV","_jsxDEV","Fragment","_Fragment","Textform","props","_s","handleupClick","newText","text","toLocaleUpperCase","setText","handleOnChange","event","target","value","children","className","heading","fileName","_jsxFileName","lineNumber","columnNumber","onChange","id","rows","type","onClick","split","length","_c","$RefreshReg$"],"sources":["F:/B Web development/react/my-app/src/Componants/Textform.js"],"sourcesContent":["// create state\r\n// hooks it is finction based componant\r\nimport React, { useState } from \"react\";\r\n\r\nexport default function Textform(props) {\r\n  // using this function if we can clicked the convert uppercase button the value in the textbox convert to thr uppercase\r\n\r\n  const handleupClick = () => {\r\n    let newText = text.toLocaleUpperCase();\r\n    // we want to change the state then we use this function\r\n    setText(newText);\r\n  };\r\n  // uisng this function we can add text\r\n  const handleOnChange = (event) => {\r\n    setText(event.target.value);\r\n  };\r\n\r\n  const [text, setText] = useState(\"Enter Text Here\");\r\n  return (<>\r\n    <div className=\"Container\">\r\n      {/* //we can assign the props */}\r\n      <h1>{props.heading}</h1>\r\n      <div className=\"mb-3\">\r\n        {/* <label for=\"MyTExt\" class=\"form-label\">\r\n            Enter text\r\n            </label> */}\r\n        <textarea\r\n          className=\"form-control\"\r\n          // in this value we can set the text value using state\r\n          value={text} onChange={handleOnChange} id=\"exampleFormControlTextarea1\" rows=\"18\"></textarea>\r\n      </div>\r\n      <button type=\"button\" className=\"btn btn-primary\" onClick={handleupClick}>\r\n        convert to uppercase\r\n      </button>\r\n    </div>\r\n\r\n    <div className=\"className my-3\">\r\n      <h1>Your Text Summary</h1>\r\n      <p>{text.split(\" \").length} word and {text.length} character</p>\r\n      <p>{0.008*text.split(\" \").length}</p>\r\n      \r\n    </div>\r\n    </>\r\n  );\r\n}\r\n"],"mappings":";;AAAA;AACA;AACA,OAAOA,KAAK,IAAIC,QAAQ,QAAQ,OAAO;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAAA,SAAAC,QAAA,IAAAC,SAAA;AAExC,eAAe,SAASC,QAAQA,CAACC,KAAK,EAAE;EAAAC,EAAA;EACtC;;EAEA,MAAMC,aAAa,GAAGA,CAAA,KAAM;IAC1B,IAAIC,OAAO,GAAGC,IAAI,CAACC,iBAAiB,EAAE;IACtC;IACAC,OAAO,CAACH,OAAO,CAAC;EAClB,CAAC;EACD;EACA,MAAMI,cAAc,GAAIC,KAAK,IAAK;IAChCF,OAAO,CAACE,KAAK,CAACC,MAAM,CAACC,KAAK,CAAC;EAC7B,CAAC;EAED,MAAM,CAACN,IAAI,EAAEE,OAAO,CAAC,GAAGZ,QAAQ,CAAC,iBAAiB,CAAC;EACnD,oBAAQE,OAAA,CAAAE,SAAA;IAAAa,QAAA,gBACNf,OAAA;MAAKgB,SAAS,EAAC,WAAW;MAAAD,QAAA,gBAExBf,OAAA;QAAAe,QAAA,EAAKX,KAAK,CAACa;MAAO;QAAAC,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,QAAM,eACxBrB,OAAA;QAAKgB,SAAS,EAAC,MAAM;QAAAD,QAAA,eAInBf,OAAA;UACEgB,SAAS,EAAC;UACV;UAAA;UACAF,KAAK,EAAEN,IAAK;UAACc,QAAQ,EAAEX,cAAe;UAACY,EAAE,EAAC,6BAA6B;UAACC,IAAI,EAAC;QAAI;UAAAN,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA;MAAY;QAAAH,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,QAC3F,eACNrB,OAAA;QAAQyB,IAAI,EAAC,QAAQ;QAACT,SAAS,EAAC,iBAAiB;QAACU,OAAO,EAAEpB,aAAc;QAAAS,QAAA,EAAC;MAE1E;QAAAG,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,QAAS;IAAA;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,QACL,eAENrB,OAAA;MAAKgB,SAAS,EAAC,gBAAgB;MAAAD,QAAA,gBAC7Bf,OAAA;QAAAe,QAAA,EAAI;MAAiB;QAAAG,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,QAAK,eAC1BrB,OAAA;QAAAe,QAAA,GAAIP,IAAI,CAACmB,KAAK,CAAC,GAAG,CAAC,CAACC,MAAM,EAAC,YAAU,EAACpB,IAAI,CAACoB,MAAM,EAAC,YAAU;MAAA;QAAAV,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,QAAI,eAChErB,OAAA;QAAAe,QAAA,EAAI,KAAK,GAACP,IAAI,CAACmB,KAAK,CAAC,GAAG,CAAC,CAACC;MAAM;QAAAV,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,QAAK;IAAA;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,QAEjC;EAAA,gBACH;AAEP;AAAChB,EAAA,CAxCuBF,QAAQ;AAAA0B,EAAA,GAAR1B,QAAQ;AAAA,IAAA0B,EAAA;AAAAC,YAAA,CAAAD,EAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}